NOP METHOD -f "slick.dbio.DBIOAction$$anon$1.<init>:void(scala.collection.Factory,scala.collection.immutable.Vector)"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$1.isLogged:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$Unpin$.isLogged:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$1.cleanUp$default$2:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$3.failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction$sameThreadExecutionContext$.<init>:void()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$4.<init>:void(scala.collection.immutable.Vector)"
NOP METHOD -f "slick.dbio.DBIOAction.cleanUp$default$2$:boolean(slick.dbio.DBIOAction)"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$4.$deserializeLambda$:java.lang.Object(java.lang.invoke.SerializedLambda)"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$1.supportsStreaming:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction.equals:boolean(java.lang.Object)"
NOP METHOD -f "slick.dbio.DBIOAction$Unpin$.failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$4.isLogged:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$2.$deserializeLambda$:java.lang.Object(java.lang.invoke.SerializedLambda)"
NOP METHOD -f "slick.dbio.DBIOAction.$deserializeLambda$:java.lang.Object(java.lang.invoke.SerializedLambda)"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$3.$deserializeLambda$:java.lang.Object(java.lang.invoke.SerializedLambda)"
NOP METHOD -f "slick.dbio.DBIOAction$Unpin$.<init>:void()"
NOP METHOD -f "slick.dbio.DBIOAction$Unpin$.slick$dbio$SynchronousDatabaseAction$$super$failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$3.slick$dbio$SynchronousDatabaseAction$$super$failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$3.<init>:void(scala.collection.immutable.Vector)"
NOP METHOD -f "slick.dbio.DBIOAction$Unpin$.<clinit>:void()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$3.isLogged:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$Pin$.slick$dbio$SynchronousDatabaseAction$$super$failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$3.cleanUp$default$2:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$Unpin$.cleanUp$default$2:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$.<clinit>:void()"
NOP METHOD -f "slick.dbio.DBIOAction$Pin$.failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction.failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$2.isLogged:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$2.slick$dbio$SynchronousDatabaseAction$$super$failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction.cleanUp$default$2:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$2.failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$2.<init>:void(scala.collection.immutable.Vector,slick.dbio.DBIOAction$sameThreadExecutionContext$)"
NOP METHOD -f "slick.dbio.DBIOAction$.failed:slick.dbio.DBIOAction(java.lang.Throwable)"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$4.failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction$Pin$.<clinit>:void()"
NOP METHOD -f "slick.dbio.DBIOAction$Pin$.<init>:void()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$1.$deserializeLambda$:java.lang.Object(java.lang.invoke.SerializedLambda)"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$4.slick$dbio$SynchronousDatabaseAction$$super$failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$1.failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction.failed$:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
NOP METHOD -f "slick.dbio.DBIOAction$sameThreadExecutionContext$.<clinit>:void()"
NOP METHOD -f "slick.dbio.DBIOAction$Pin$.cleanUp$default$2:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$.$deserializeLambda$:java.lang.Object(java.lang.invoke.SerializedLambda)"
NOP METHOD -f "slick.dbio.DBIOAction$Pin$.isLogged:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$4.cleanUp$default$2:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$2.cleanUp$default$2:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction.isLogged:boolean()"
NOP METHOD -f "slick.dbio.DBIOAction$$anon$1.slick$dbio$SynchronousDatabaseAction$$super$failed:slick.dbio.DBIOAction()"
NOP METHOD -f "slick.dbio.DBIOAction$.<init>:void()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.withPinnedSession:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$1.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.flatMap:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.successful:slick.dbio.DBIOAction(java.lang.Object)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.withFilter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.getDumpInfo:slick.util.DumpInfo()"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$2.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.andFinally:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.flatMap:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.flatMap:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.filter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$Unpin$.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.sequence:slick.dbio.DBIOAction(scala.collection.IterableOnce,scala.collection.Factory)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.andFinally:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$4.$greater$greater:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$2.$greater$greater:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.flatten:slick.dbio.DBIOAction(scala.$less$colon$less)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.getDumpInfo:slick.util.DumpInfo()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$.successful:slick.dbio.DBIOAction(java.lang.Object)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$3.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.sequenceOption:slick.dbio.DBIOAction(scala.Option)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.withFilter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.andFinally:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.$greater$greater:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$4.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.nonFusedEquivalentAction:slick.dbio.DBIOAction()"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$Pin$.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$Unpin$.$greater$greater:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.from:slick.dbio.DBIOAction(scala.concurrent.Future)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.named:slick.dbio.DBIOAction(java.lang.String)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.flatMap:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.getDumpInfo:slick.util.DumpInfo()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.andFinally:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.named:slick.dbio.DBIOAction(java.lang.String)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.getDumpInfo:slick.util.DumpInfo()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.filter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.nonFusedEquivalentAction:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.flatten:slick.dbio.DBIOAction(scala.$less$colon$less)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.nonFusedEquivalentAction:slick.dbio.SequenceAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.filter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.named:slick.dbio.DBIOAction(java.lang.String)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.flatten:slick.dbio.DBIOAction(scala.$less$colon$less)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$1.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.withFilter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.map:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.nonFusedEquivalentAction:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.andFinally:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$Pin$.$greater$greater:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.named:slick.dbio.DBIOAction(java.lang.String)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$4.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$.sequenceOption:slick.dbio.DBIOAction(scala.Option)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$3.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$3.andThen:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.withPinnedSession:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.flatten:slick.dbio.DBIOAction(scala.$less$colon$less)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.filter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$.sequenceGroupAsSeq$1:slick.dbio.DBIOAction(scala.collection.immutable.Vector,slick.dbio.DBIOAction$sameThreadExecutionContext$)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$2.andThen:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.collect:slick.dbio.DBIOAction(scala.PartialFunction,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$3.$greater$greater:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.asTry:slick.dbio.DBIOAction()"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.seq:slick.dbio.DBIOAction(scala.collection.immutable.Seq)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.nonFusedEquivalentAction:slick.dbio.SequenceAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.flatMap:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$.sequenceGroup$1:slick.dbio.DBIOAction(scala.collection.immutable.Vector,boolean)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.collect:slick.dbio.DBIOAction(scala.PartialFunction,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$Unpin$.andThen:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$.sequenceSync$1:slick.dbio.DBIOAction(scala.collection.immutable.Vector)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.flatMap:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.getDumpInfo:slick.util.DumpInfo()"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$Pin$.andThen:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.withFilter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.asTry:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.filter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.withFilter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.withPinnedSession:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.nonFusedEquivalentAction:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.asTry:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.map:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.collect:slick.dbio.DBIOAction(scala.PartialFunction,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.collect:slick.dbio.DBIOAction(scala.PartialFunction,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$1.andThen:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$4.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$.sequenceGroupAsM$1:slick.dbio.DBIOAction(scala.collection.immutable.Vector,scala.collection.Factory)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.withFilter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.andThen:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.flatten:slick.dbio.DBIOAction(scala.$less$colon$less)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.collect:slick.dbio.DBIOAction(scala.PartialFunction,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.asTry:slick.dbio.DBIOAction()"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$1.$greater$greater:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.named:slick.dbio.DBIOAction(java.lang.String)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.map:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$Unpin$.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.withFilter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.andFinally$:slick.dbio.DBIOAction(slick.dbio.DBIOAction,slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.andFinally:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.asTry:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.flatten:slick.dbio.DBIOAction(scala.$less$colon$less)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.withPinnedSession:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.andFinally:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$.from:slick.dbio.DBIOAction(scala.concurrent.Future)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.named:slick.dbio.DBIOAction(java.lang.String)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.filter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.withPinnedSession:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$3.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.map:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.andThen$:slick.dbio.DBIOAction(slick.dbio.DBIOAction,slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.collect:slick.dbio.DBIOAction(scala.PartialFunction,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.nonFusedEquivalentAction:slick.dbio.AndThenAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.nonFusedEquivalentAction:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.$init$:void(slick.dbio.DBIOAction)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.withPinnedSession:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.nonFusedEquivalentAction:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.flatten:slick.dbio.DBIOAction(scala.$less$colon$less)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$1.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$Pin$.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$.sequence:slick.dbio.DBIOAction(scala.collection.IterableOnce,scala.collection.Factory)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$Unpin$.cleanUp:slick.dbio.DBIOAction(scala.Function1,boolean,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Unpin$.map:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.map:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.filter:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$Pin$.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.collect:slick.dbio.DBIOAction(scala.PartialFunction,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$Pin$.named:slick.dbio.DBIOAction(java.lang.String)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.filter$:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$2.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.asTry$:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$.seq:slick.dbio.DBIOAction(scala.collection.immutable.Seq)"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$4.andThen:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction.flatMap:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.getDumpInfo:slick.util.DumpInfo()"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction$$anon$2.zip:slick.dbio.DBIOAction(slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.asTry:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$3.withPinnedSession:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.map:slick.dbio.DBIOAction(scala.Function1,scala.concurrent.ExecutionContext)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$1.nonFusedEquivalentAction:slick.dbio.DBIOAction()"
MAP -override -d RET -s PAR -i 1 METHOD -f "slick.dbio.DBIOAction.$greater$greater$:slick.dbio.DBIOAction(slick.dbio.DBIOAction,slick.dbio.DBIOAction)"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$4.asTry:slick.dbio.DBIOAction()"
MAP -override -d RET -s INST METHOD -f "slick.dbio.DBIOAction$$anon$2.zipWith:slick.dbio.DBIOAction(slick.dbio.DBIOAction,scala.Function2,scala.concurrent.ExecutionContext)"